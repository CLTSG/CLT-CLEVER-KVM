name: Manual Build

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'ubuntu-22.04'
        type: choice
        options:
        - ubuntu-22.04
        - windows-latest
        - macos-latest
      debug:
        description: 'Build in debug mode'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ${{ inputs.platform }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ inputs.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release
          linking-type: static

      - name: Install dependencies (ubuntu only)
        if: inputs.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev libxdo-dev libxrandr-dev libxcb-randr0-dev pkg-config
          # Install FFmpeg development libraries for Rust compilation
          sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libavdevice-dev libavfilter-dev libswscale-dev libswresample-dev
          # Verify FFmpeg installation
          pkg-config --modversion libavutil || echo "FFmpeg pkg-config not found"

      - name: Install dependencies (macOS only)
        if: inputs.platform == 'macos-latest'
        run: |
          # Install both x86_64 and arm64 versions of FFmpeg
          arch -x86_64 brew install pkg-config || brew install pkg-config
          arch -arm64 brew install ffmpeg || echo "arm64 ffmpeg install failed"
          arch -x86_64 brew install ffmpeg || echo "x86_64 ffmpeg install failed"
          
          # Set up environment for cross-compilation
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" >> $GITHUB_ENV
          
          # Set PKG_CONFIG_PATH to include both architectures
          echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig" >> $GITHUB_ENV
          
          # Verify installation
          pkg-config --modversion libavutil || echo "pkg-config libavutil failed"
          ls -la /opt/homebrew/lib/pkgconfig/libav* || echo "No arm64 FFmpeg pkg-config files"
          ls -la /usr/local/lib/pkgconfig/libav* || echo "No x86_64 FFmpeg pkg-config files"

      - name: Install dependencies (Windows only)
        if: inputs.platform == 'windows-latest'
        run: |
          # Install vcpkg for FFmpeg development libraries
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe integrate install
          # Install FFmpeg with all required components
          .\vcpkg.exe install ffmpeg[core,avcodec,avformat,avdevice,avfilter,swresample,swscale]:x64-windows
          # Set environment variables
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows\lib\pkgconfig" >> $env:GITHUB_ENV
          # Copy FFmpeg DLLs to be bundled with the app
          New-Item -ItemType Directory -Force -Path "src-tauri\libs"
          Copy-Item "C:\vcpkg\installed\x64-windows\bin\*.dll" -Destination "src-tauri\libs\" -Force

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app (Release)
        if: ${{ !inputs.debug }}
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
        run: npm run tauri:build

      - name: Build the app (Debug)
        if: ${{ inputs.debug }}
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
        run: npm run tauri:build:debug

      - name: Upload artifacts (Linux)
        if: inputs.platform == 'ubuntu-22.04'
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-artifact@v4
        with:
          name: clever-kvm-linux
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/clever-kvm

      - name: Upload artifacts (Windows)
        if: inputs.platform == 'windows-latest'
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-artifact@v4
        with:
          name: clever-kvm-windows
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/clever-kvm.exe

      - name: Upload artifacts (macOS)
        if: inputs.platform == 'macos-latest'
        env:
          RUSTFLAGS: ${{ env.RUSTFLAGS }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-artifact@v4
        with:
          name: clever-kvm-macos
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/universal-apple-darwin/release/clever-kvm
