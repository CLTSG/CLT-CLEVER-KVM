name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      
      - name: Create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Clever KVM v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this version.',
              draft: true,
              prerelease: false
            })
            return data.id

  build:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macOS runners so it's in an `if` to slightly speed up the CI.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache vcpkg (Windows only)
        if: matrix.platform == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\vcpkg
          key: vcpkg-${{ runner.os }}-ffmpeg-v1
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev libxdo-dev libxrandr-dev libxcb-randr0-dev
          sudo apt-get install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libavdevice-dev libavfilter-dev libswscale-dev libswresample-dev pkg-config
          # Verify installation
          pkg-config --modversion libavutil
          pkg-config --libs libavutil

      - name: Install dependencies (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install ffmpeg pkg-config
          # Verify installation
          pkg-config --modversion libavutil
          pkg-config --libs libavutil

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # Check if vcpkg is cached, if not install it
          if (-not (Test-Path "C:\vcpkg\vcpkg.exe")) {
            Write-Host "Installing vcpkg..."
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
            cd C:\vcpkg
            .\bootstrap-vcpkg.bat
            .\vcpkg.exe integrate install
          } else {
            Write-Host "Using cached vcpkg installation"
            cd C:\vcpkg
          }
          # Install ffmpeg with all required components
          .\vcpkg.exe install ffmpeg[avcodec,avformat,avdevice,avfilter,swresample,swscale]:x64-windows
          # Set environment variables
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows\lib\pkgconfig" >> $env:GITHUB_ENV
          # Verify installation
          Get-ChildItem "C:\vcpkg\installed\x64-windows\lib\pkgconfig\libav*.pc" | Select-Object Name

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # FFmpeg environment variables
          PKG_CONFIG_ALLOW_SYSTEM_LIBS: 1
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build]

    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
