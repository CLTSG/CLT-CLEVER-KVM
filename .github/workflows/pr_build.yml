name: Pull Request Build

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
        - ubuntu-latest
        - windows-2022
      debug:
        description: 'Build in debug mode'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ${{ github.event_name == 'workflow_dispatch' && inputs.platform || matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        # Only use matrix for automatic builds (PR/push), not for manual dispatch
        platform: ${{ github.event_name == 'workflow_dispatch' && fromJSON('[""]') || fromJSON('["ubuntu-latest", "windows-2022"]') }}
        exclude:
          # Exclude empty platform when using manual dispatch
          - platform: ""
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: (github.event_name == 'workflow_dispatch' && inputs.platform || matrix.platform) == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl wget file libssl-dev \
            libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev \
            libxdo-dev libxcb-randr0-dev xdg-desktop-portal libpipewire-0.3-dev libopus-dev \
            libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libswresample-dev \
            patchelf libxrandr-dev

      - name: Install dependencies (Windows only)
        if: (github.event_name == 'workflow_dispatch' && inputs.platform || matrix.platform) == 'windows-2022'
        run: |
          echo "Windows dependencies managed by Tauri"

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app (Release)
        if: ${{ github.event_name == 'workflow_dispatch' && !inputs.debug || github.event_name != 'workflow_dispatch' }}
        env:
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run tauri:build

      - name: Build the app (Debug)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug }}
        env:
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run tauri:build:debug

      - name: Upload artifacts (Linux)
        if: (github.event_name == 'workflow_dispatch' && inputs.platform || matrix.platform) == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: clever-kvm-linux
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/clever-kvm

      - name: Upload artifacts (Windows)
        if: (github.event_name == 'workflow_dispatch' && inputs.platform || matrix.platform) == 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: clever-kvm-windows
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/clever-kvm.exe
